{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/quiz.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../review/review.component\";\n\nfunction QuizComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"0\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction QuizComponent_section_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.question.questionText, \"\");\n  }\n}\n\nfunction QuizComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function QuizComponent_div_19_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.navigateToNextQuestion();\n    });\n    i0.ɵɵtext(2, \" Next \");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.disabled);\n  }\n}\n\nfunction QuizComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function QuizComponent_div_20_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.navigateToResults();\n    });\n    i0.ɵɵtext(2, \" Show Your Score \");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction QuizComponent_ngb_progressbar_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ngb-progressbar\", 19)(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"striped\", true)(\"animated\", true)(\"value\", ctx_r4.progressValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.progressValue, \"%\");\n  }\n}\n\nexport let QuizComponent = /*#__PURE__*/(() => {\n  class QuizComponent {\n    constructor(route, router, quizService) {\n      this.route = route;\n      this.router = router;\n      this.quizService = quizService;\n      this.correctAnswersCount = 0;\n      this.currentQuestion = 0;\n      this.timePerQuestion = 20;\n      this.blueBorder = '2px solid #007aff';\n    }\n\n    ngOnInit() {\n      this.quizService.get().subscribe(data => {\n        console.log(\"inside init\");\n        this.allQuestions = data;\n        this.question = this.getQuestion;\n        this.questionIndex = 0;\n        this.totalQuestions = this.allQuestions.length;\n        this.timeLeft = this.timePerQuestion;\n        this.progressValue = 100 * (this.currentQuestion + 1) / this.totalQuestions;\n        this.countdown();\n        this.route.paramMap.subscribe(params => {\n          this.setQuestionID(+params.get('questionId')); // get the question ID and store it\n\n          this.question = this.getQuestion;\n        });\n      });\n    }\n\n    displayNextQuestion() {\n      this.resetTimer();\n      this.increaseProgressValue();\n      this.questionIndex++;\n\n      if (typeof document.getElementById('question') !== 'undefined' && this.getQuestionID() <= this.totalQuestions && this.allQuestions.length > 0) {\n        document.getElementById('question').innerHTML = this.allQuestions[this.questionIndex]['questionText'];\n        document.getElementById('question').style.border = this.blueBorder;\n      } else {\n        this.navigateToResults();\n      }\n    }\n\n    navigateToNextQuestion() {\n      if (this.question.selectedOption === this.question.answer) {\n        this.correctAnswersCount++;\n      }\n\n      this.router.navigate(['/question', this.getQuestionID() + 1]);\n      this.displayNextQuestion();\n    }\n\n    navigateToResults() {\n      if (this.question.selectedOption === this.question.answer) {\n        this.correctAnswersCount++;\n      }\n\n      this.router.navigate(['/results'], {\n        state: {\n          totalQuestions: this.totalQuestions,\n          correctAnswersCount: this.correctAnswersCount,\n          completionTime: this.completionTime,\n          allQuestions: this.allQuestions\n        }\n      });\n    } // checks whether the question is valid and is answered correctly\n\n\n    checkIfAnsweredCorrectly() {\n      if (this.isThereAnotherQuestion() && this.isCorrectAnswer()) {\n        //  this.incrementCorrectAnswersCount();\n        this.correctAnswer = true;\n        this.hasAnswer = true;\n        this.disabled = false;\n        this.elapsedTime = Math.ceil(this.timePerQuestion - this.timeLeft);\n\n        if (this.getQuestionID() < this.totalQuestions) {\n          this.elapsedTimes = [...this.elapsedTimes, this.elapsedTime];\n        } else {\n          this.elapsedTimes = [...this.elapsedTimes, 0];\n        }\n\n        this.quizDelay(3000);\n\n        if (this.getQuestionID() < this.totalQuestions) {\n          this.navigateToNextQuestion();\n        } else {\n          this.navigateToResults();\n        }\n      }\n    }\n\n    incrementCorrectAnswersCount() {\n      if (this.questionIndex <= this.totalQuestions && this.isCorrectAnswer()) {\n        if (this.correctAnswersCount === this.totalQuestions) {\n          return this.correctAnswersCount;\n        } else {\n          this.correctAnswer = true;\n          this.hasAnswer = true;\n          return this.correctAnswersCount++;\n        }\n      } else {\n        this.correctAnswer = false;\n        this.hasAnswer = false;\n        return 0;\n      }\n    }\n\n    increaseProgressValue() {\n      this.progressValue = parseFloat((100 * (this.getQuestionID() + 1) / this.totalQuestions).toFixed(1));\n    }\n    /****************  public API  ***************/\n\n\n    getQuestionID() {\n      return this.questionIndex;\n    }\n\n    setQuestionID(id) {\n      return this.questionIndex = id;\n    }\n\n    isThereAnotherQuestion() {\n      return this.questionIndex <= this.allQuestions.length;\n    }\n\n    isFinalQuestion() {\n      return this.currentQuestion === this.totalQuestions;\n    }\n\n    isCorrectAnswer() {\n      return this.question.selectedOption === this.question.answer;\n    }\n\n    get getQuestion() {\n      return this.allQuestions.filter(question => question.questionId === this.questionIndex)[0];\n    } // countdown clock\n\n\n    countdown() {\n      if (this.questionIndex <= this.totalQuestions) {\n        this.interval = setInterval(() => {\n          if (this.timeLeft > 0) {\n            this.timeLeft--;\n            this.checkIfAnsweredCorrectly();\n\n            if (this.timeLeft === 0 && !this.isFinalQuestion()) {\n              this.navigateToNextQuestion();\n            }\n\n            if (this.timeLeft === 0 && this.isFinalQuestion()) {\n              this.navigateToResults();\n            }\n\n            if (this.isFinalQuestion() && this.hasAnswer === true) {\n              this.navigateToResults();\n              this.quizIsOver = true;\n            } // disable the next button until an option has been selected\n\n\n            this.question.selectedOption === '' ? this.disabled = true : this.disabled = false;\n          }\n        }, 1000);\n      }\n    }\n\n    resetTimer() {\n      this.timeLeft = this.timePerQuestion;\n    }\n\n    quizDelay(milliseconds) {\n      const start = new Date().getTime();\n      let counter = 0;\n      let end = 0;\n\n      while (counter < milliseconds) {\n        end = new Date().getTime();\n        counter = end - start;\n      }\n    }\n\n  }\n\n  QuizComponent.ɵfac = function QuizComponent_Factory(t) {\n    return new (t || QuizComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.QuizService));\n  };\n\n  QuizComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuizComponent,\n    selectors: [[\"app-quiz\"]],\n    inputs: {\n      answer: \"answer\",\n      formGroup: \"formGroup\"\n    },\n    outputs: {\n      question: \"question\"\n    },\n    decls: 24,\n    vars: 9,\n    consts: [[1, \"scoreboard\"], [1, \"row\"], [\"id\", \"score\", 1, \"score\"], [1, \"time-left\"], [1, \"leader\"], [4, \"ngIf\"], [\"id\", \"question\", \"class\", \"d-flex justify-content-center\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-center\", 3, \"question\"], [1, \"d-flex\", \"justify-content-center\"], [\"class\", \"nextQuestionNav\", 4, \"ngIf\"], [\"class\", \"showScoreNav\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-center\", \"padding-top\"], [1, \"progress-bar\"], [\"type\", \"success\", 3, \"striped\", \"animated\", \"value\", 4, \"ngIf\"], [\"id\", \"question\", 1, \"d-flex\", \"justify-content-center\"], [1, \"nextQuestionNav\"], [\"id\", \"Next\", \"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [1, \"showScoreNav\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"success\", 3, \"striped\", \"animated\", \"value\"]],\n    template: function QuizComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"section\", 0)(2, \"div\", 1)(3, \"div\", 2);\n        i0.ɵɵtext(4, \"Score \");\n        i0.ɵɵelementStart(5, \"span\", 0);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 3)(8, \"span\", 4);\n        i0.ɵɵtext(9, \"Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"span\", 0);\n        i0.ɵɵtext(11, \" 0:\");\n        i0.ɵɵtemplate(12, QuizComponent_span_12_Template, 2, 0, \"span\", 5);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(14, \"div\");\n        i0.ɵɵtemplate(15, QuizComponent_section_15_Template, 2, 1, \"section\", 6);\n        i0.ɵɵelementStart(16, \"div\");\n        i0.ɵɵelement(17, \"app-review\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 8);\n        i0.ɵɵtemplate(19, QuizComponent_div_19_Template, 3, 1, \"div\", 9);\n        i0.ɵɵtemplate(20, QuizComponent_div_20_Template, 3, 0, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 11)(22, \"section\", 12);\n        i0.ɵɵtemplate(23, QuizComponent_ngb_progressbar_23_Template, 3, 4, \"ngb-progressbar\", 13);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate2(\" \", ctx.correctAnswersCount, \"/\", ctx.totalQuestions, \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.timeLeft < 10);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\", ctx.timeLeft, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.question !== undefined);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"question\", ctx.question);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.question && ctx.question.questionId !== ctx.totalQuestions);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.question && ctx.question.questionId === ctx.totalQuestions);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.progressValue >= 0 && ctx.progressValue <= 100 && ctx.question && ctx.question.questionId <= ctx.totalQuestions);\n      }\n    },\n    directives: [i3.NgIf, i4.ReviewComponent],\n    styles: [\"section.scoreboard[_ngcontent-%COMP%]{margin-top:10px!important}section.scoreboard[_ngcontent-%COMP%]   .row[_ngcontent-%COMP%]{display:inline}section.scoreboard[_ngcontent-%COMP%]   .score[_ngcontent-%COMP%]{float:left;margin-left:1rem}section.scoreboard[_ngcontent-%COMP%]   .score[_ngcontent-%COMP%]   .leader[_ngcontent-%COMP%]{margin-left:15px}section.scoreboard[_ngcontent-%COMP%]   .badge[_ngcontent-%COMP%]{float:left;margin:20px 10px 0 100px;font-family:Space Mono,monospace;font-size:24px;font-weight:900;font-style:italic}section.scoreboard[_ngcontent-%COMP%]   .time-left[_ngcontent-%COMP%]{float:right;margin-right:1rem}section.scoreboard[_ngcontent-%COMP%]   .time-left[_ngcontent-%COMP%]   .leader[_ngcontent-%COMP%]{margin-left:20px}section.scoreboard[_ngcontent-%COMP%]   .scoreboard[_ngcontent-%COMP%]{font-family:Alarm Clock,Space Mono,monospace;font-weight:900;font-size:30px;color:#006400;display:inline-block;margin:-5px 0 0 15px;width:auto}section.scoreboard[_ngcontent-%COMP%]   .leader[_ngcontent-%COMP%]{display:block;font-weight:900;font-size:18px;text-transform:uppercase;position:relative;top:-5px}section#question[_ngcontent-%COMP%]{font-family:Space Mono,monospace;font-weight:700;font-size:20px!important;margin:25 0 10px .4rem;border:2px solid #007aff;padding:5px 10px 15px 20px;background-color:#f5f5f5;color:#0f0900;height:auto;width:39rem;margin-left:366px!important}section.paging[_ngcontent-%COMP%]{width:40rem}section.paging[_ngcontent-%COMP%]   .nextQuestionNav[_ngcontent-%COMP%]{float:right;margin-right:-.4rem}section.paging[_ngcontent-%COMP%]   .showScoreNav[_ngcontent-%COMP%]{width:150px;text-align:center;margin:0 auto}section.paging[_ngcontent-%COMP%]   .nextQuestionNav[_ngcontent-%COMP%]:hover, section.paging[_ngcontent-%COMP%]   .showScoreNav[_ngcontent-%COMP%]:hover{border:1px solid #007aff}section.paging[_ngcontent-%COMP%]   .showScoreNav[_ngcontent-%COMP%]:hover{width:141.5px!important}section.progress-bar[_ngcontent-%COMP%]{width:30rem;height:auto}section.progress-bar[_ngcontent-%COMP%]   ngb-progressbar[_ngcontent-%COMP%]{border-radius:10px}.padding-top[_ngcontent-%COMP%]{padding-top:10px}\"]\n  });\n  return QuizComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}